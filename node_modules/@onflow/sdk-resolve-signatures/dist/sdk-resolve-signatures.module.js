import{isTransaction as r}from"@onflow/interaction";import{encodeTransactionPayload as e,encodeTransactionEnvelope as t}from"@onflow/encode";import{sansPrefix as n}from"@onflow/util-address";function o(){return(o=Object.assign||function(r){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(r[n]=t[n])}return r}).apply(this,arguments)}function a(r,e){(null==e||e>r.length)&&(e=r.length);for(var t=0,n=new Array(e);t<e;t++)n[t]=r[t];return n}function i(r){return{script:r.message.cadence,refBlock:r.message.refBlock||null,gasLimit:r.message.computeLimit,arguments:r.message.arguments.map(function(e){return r.arguments[e].asArgument}),proposalKey:{address:n(r.accounts[r.proposer].addr),keyId:r.accounts[r.proposer].keyId,sequenceNum:r.accounts[r.proposer].sequenceNum},payer:n(r.accounts[r.payer].addr),authorizers:r.authorizations.map(function(e){return n(r.accounts[e].addr)}).reduce(function(r,e){return r.find(function(r){return r===e})?r:[].concat(r,[e])},[])}}var s=function(n){try{if(!r(n))return Promise.resolve(n);var a=function(r){var e=new Set(r.authorizations);e.add(r.proposer),e.delete(r.payer),e=Array.from(e);var t=new Set([r.payer]);return{insideSigners:e,outsideSigners:t=Array.from(t)}}(n),s=a.outsideSigners;return Promise.resolve(u(n,a.insideSigners,e(i(n)))).then(function(r){var e=c(n,r);return Promise.resolve(u(n,s,t(o({},i(n),{payloadSigs:e})))).then(function(r){return c(n,r),n})})}catch(r){return Promise.reject(r)}},u=function(r,e,t){void 0===e&&(e=[]);try{return Promise.all(e.map(function(e){try{return Promise.resolve(r.accounts[e].signingFunction({message:t,addr:n(r.accounts[e].addr),keyId:r.accounts[e].keyId,roles:r.accounts[e].role,interaction:r})).then(function(t){if(t.cid=e,n(r.accounts[e].addr)!==n(t.addr))throw new Error(e+" — mismatching address in composite signature");if(r.accounts[e].keyId!==t.keyId)throw new Error(e+" — mismatching keyId in composite signature");return t.sig=t.signature,t.address=n(t.addr),t})}catch(r){return Promise.reject(r)}}))}catch(r){return Promise.reject(r)}};function c(r,e){for(var t,n=function(r,e){var t;if("undefined"==typeof Symbol||null==r[Symbol.iterator]){if(Array.isArray(r)||(t=function(r,e){if(r){if("string"==typeof r)return a(r,void 0);var t=Object.prototype.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?a(r,void 0):void 0}}(r))){t&&(r=t);var n=0;return function(){return n>=r.length?{done:!0}:{done:!1,value:r[n++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(t=r[Symbol.iterator]()).next.bind(t)}(e);!(t=n()).done;){var o=t.value;r.accounts[o.cid].signature=o.signature}return e}export{s as resolveSignatures};
//# sourceMappingURL=sdk-resolve-signatures.module.js.map
