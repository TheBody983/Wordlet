!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("@onflow/interaction"),require("@onflow/encode"),require("@onflow/util-address")):"function"==typeof define&&define.amd?define(["exports","@onflow/interaction","@onflow/encode","@onflow/util-address"],r):r((e=e||self).sdkResolveSignatures={},e.interaction,e.encode,e.utilAddress)}(this,function(e,r,n,t){function o(){return(o=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}function i(e,r){(null==r||r>e.length)&&(r=e.length);for(var n=0,t=new Array(r);n<r;n++)t[n]=e[n];return t}function a(e){return{script:e.message.cadence,refBlock:e.message.refBlock||null,gasLimit:e.message.computeLimit,arguments:e.message.arguments.map(function(r){return e.arguments[r].asArgument}),proposalKey:{address:t.sansPrefix(e.accounts[e.proposer].addr),keyId:e.accounts[e.proposer].keyId,sequenceNum:e.accounts[e.proposer].sequenceNum},payer:t.sansPrefix(e.accounts[e.payer].addr),authorizers:e.authorizations.map(function(r){return t.sansPrefix(e.accounts[r].addr)}).reduce(function(e,r){return e.find(function(e){return e===r})?e:[].concat(e,[r])},[])}}var s=function(e,r,n){void 0===r&&(r=[]);try{return Promise.all(r.map(function(r){try{return Promise.resolve(e.accounts[r].signingFunction({message:n,addr:t.sansPrefix(e.accounts[r].addr),keyId:e.accounts[r].keyId,roles:e.accounts[r].role,interaction:e})).then(function(n){if(n.cid=r,t.sansPrefix(e.accounts[r].addr)!==t.sansPrefix(n.addr))throw new Error(r+" — mismatching address in composite signature");if(e.accounts[r].keyId!==n.keyId)throw new Error(r+" — mismatching keyId in composite signature");return n.sig=n.signature,n.address=t.sansPrefix(n.addr),n})}catch(e){return Promise.reject(e)}}))}catch(e){return Promise.reject(e)}};function u(e,r){for(var n,t=function(e,r){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,r){if(e){if("string"==typeof e)return i(e,void 0);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,void 0):void 0}}(e))){n&&(e=n);var t=0;return function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=e[Symbol.iterator]()).next.bind(n)}(r);!(n=t()).done;){var o=n.value;e.accounts[o.cid].signature=o.signature}return r}e.resolveSignatures=function(e){try{if(!r.isTransaction(e))return Promise.resolve(e);var t=function(e){var r=new Set(e.authorizations);r.add(e.proposer),r.delete(e.payer),r=Array.from(r);var n=new Set([e.payer]);return{insideSigners:r,outsideSigners:n=Array.from(n)}}(e),i=t.outsideSigners;return Promise.resolve(s(e,t.insideSigners,n.encodeTransactionPayload(a(e)))).then(function(r){var t=u(e,r);return Promise.resolve(s(e,i,n.encodeTransactionEnvelope(o({},a(e),{payloadSigs:t})))).then(function(r){return u(e,r),e})})}catch(e){return Promise.reject(e)}}});
//# sourceMappingURL=sdk-resolve-signatures.umd.js.map
