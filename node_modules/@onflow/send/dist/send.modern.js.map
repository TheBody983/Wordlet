{"version":3,"file":"send.modern.js","sources":["../src/unary.js","../src/send-transaction.js","../src/send-get-account.js","../src/send-get-latest-block.js","../src/send-get-block-by-id.js","../src/send-get-block-by-height.js","../src/send.js","../src/send-get-transaction-status.js","../src/send-execute-script.js","../src/send-get-events.js","../src/send-ping.js"],"sourcesContent":["import {grpc} from \"@improbable-eng/grpc-web\"\nimport {NodeHttpTransport} from \"@improbable-eng/grpc-web-node-http-transport\"\n\ngrpc.setDefaultTransport(NodeHttpTransport())\n\nexport async function unary(host, method, request) {\n  return new Promise((resolve, reject) => {\n    grpc.unary(method, {\n      request: request,\n      host: host,\n      onEnd: ({status, statusMessage, message}) => {\n        if (status === grpc.Code.OK) {\n          resolve(message)\n        } else {\n          reject(new Error(statusMessage))\n        }\n      },\n    })\n  })\n}\n","import {AccessAPI, Transaction, SendTransactionRequest} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {sansPrefix} from \"@onflow/util-address\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\nconst paddedHexBuffer = (hex, pad) =>\n  Buffer.from(hex.padStart(pad * 2, 0), \"hex\")\nconst scriptBuffer = script => Buffer.from(script, \"utf8\")\nconst hexBuffer = hex => Buffer.from(hex, \"hex\")\nconst addressBuffer = addr => paddedHexBuffer(addr, 8)\nconst argumentBuffer = arg => Buffer.from(JSON.stringify(arg), \"utf8\")\n\nexport async function sendTransaction(ix, opts = {}) {\n  ix = await ix\n\n  const tx = new Transaction()\n  tx.setScript(scriptBuffer(ix.message.cadence))\n  tx.setGasLimit(ix.message.computeLimit)\n  tx.setReferenceBlockId(\n    ix.message.refBlock ? hexBuffer(ix.message.refBlock) : null\n  )\n  tx.setPayer(addressBuffer(sansPrefix(ix.accounts[ix.payer].addr)))\n  ix.message.arguments.forEach(arg =>\n    tx.addArguments(argumentBuffer(ix.arguments[arg].asArgument))\n  )\n  ix.authorizations\n    .map(tempId => ix.accounts[tempId].addr)\n    .reduce((prev, current) => {\n      return prev.find(item => item === current) ? prev : [...prev, current]\n    }, [])\n    .forEach(addr => tx.addAuthorizers(addressBuffer(sansPrefix(addr))))\n\n  const proposalKey = new Transaction.ProposalKey()\n  proposalKey.setAddress(\n    addressBuffer(sansPrefix(ix.accounts[ix.proposer].addr))\n  )\n  proposalKey.setKeyId(ix.accounts[ix.proposer].keyId)\n  proposalKey.setSequenceNumber(ix.accounts[ix.proposer].sequenceNum)\n\n  tx.setProposalKey(proposalKey)\n\n  // Apply Non Payer Signatures to Payload Signatures\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (!acct.role.payer && acct.signature != null) {\n        const sig = new Transaction.Signature()\n        sig.setAddress(addressBuffer(sansPrefix(acct.addr)))\n        sig.setKeyId(acct.keyId)\n        sig.setSignature(hexBuffer(acct.signature))\n        tx.addPayloadSignatures(sig)\n      }\n    } catch (error) {\n      console.error(\"Trouble applying payload signature\", {acct, ix})\n      throw error\n    }\n  }\n\n  // Apply Payer Signatures to Envelope Signatures\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (acct.role.payer && acct.signature != null) {\n        const sig = new Transaction.Signature()\n        sig.setAddress(addressBuffer(sansPrefix(acct.addr)))\n        sig.setKeyId(acct.keyId)\n        sig.setSignature(hexBuffer(acct.signature))\n        tx.addEnvelopeSignatures(sig)\n      }\n    } catch (error) {\n      console.error(\"Trouble applying envelope signature\", {acct, ix})\n      throw error\n    }\n  }\n\n  const req = new SendTransactionRequest()\n  req.setTransaction(tx)\n\n  var t1 = Date.now()\n  const res = await unary(opts.node, AccessAPI.SendTransaction, req)\n  var t2 = Date.now()\n\n  let ret = response()\n  ret.tag = ix.tag\n  ret.transactionId = u8ToHex(res.getId_asU8())\n\n  if (typeof window !== \"undefined\") {\n    window.dispatchEvent(\n      new CustomEvent(\"FLOW::TX\", {\n        detail: {txId: ret.transactionId, delta: t2 - t1},\n      })\n    )\n  }\n\n  return ret\n}\n","import {GetAccountRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {sansPrefix, withPrefix} from \"@onflow/util-address\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\nconst paddedHexBuffer = (hex, pad) =>\n  Buffer.from(hex.padStart(pad * 2, 0), \"hex\")\n\nconst addressBuffer = addr => paddedHexBuffer(addr, 8)\n\nexport async function sendGetAccount(ix, opts = {}) {\n  ix = await ix\n\n  const req = new GetAccountRequest()\n  req.setAddress(addressBuffer(sansPrefix(ix.accountAddr)))\n\n  const res = await unary(opts.node, AccessAPI.GetAccount, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n\n  const account = res.getAccount()\n\n  let contractsMap;\n  const contracts = (contractsMap = account.getContractsMap()) ? contractsMap.getEntryList().reduce((acc, contract) => ({\n    ...acc,\n    [contract[0]]: new TextDecoder(\"utf-8\").decode(contract[1] || new UInt8Array())\n  }), {}) : {}\n\n  ret.account = {\n    address: withPrefix(u8ToHex(account.getAddress_asU8())),\n    balance: account.getBalance(),\n    code: new TextDecoder(\"utf-8\").decode(account.getCode_asU8() || new UInt8Array()),\n    contracts,\n    keys: account.getKeysList().map(publicKey => ({\n      index: publicKey.getIndex(),\n      publicKey: u8ToHex(publicKey.getPublicKey_asU8()),\n      signAlgo: publicKey.getSignAlgo(),\n      hashAlgo: publicKey.getHashAlgo(),\n      weight: publicKey.getWeight(),\n      sequenceNumber: publicKey.getSequenceNumber(),\n      revoked: publicKey.getRevoked(),\n    })),\n  }\n\n  return ret\n}\n","import {GetLatestBlockRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\n\nconst latestBlockDeprecationNotice = () => {\n  console.error(\n    `\n          %c@onflow/send Deprecation Notice\n          ========================\n\n          Operating upon data of the latestBlock field of the interaction object is deprecated and will no longer be recognized in future releases of @onflow/send.\n          Find out more here: https://github.com/onflow/flow-js-sdk/blob/master/packages/send/WARNINGS.md#0001-Deprecating-latestBlock-field\n\n          =======================\n        `\n      .replace(/\\n\\s+/g, \"\\n\")\n      .trim(),\n    \"font-weight:bold;font-family:monospace;\"\n  )\n}\n\nexport async function sendGetLatestBlock(ix, opts = {}) {\n  ix = await ix\n\n  const req = new GetLatestBlockRequest()\n\n  if (ix.latestBlock && ix.latestBlock.isSealed) {\n    req.setIsSealed(ix.latestBlock.isSealed)\n    latestBlockDeprecationNotice()\n  }\n\n  if (ix.block && ix.block.isSealed) {\n    req.setIsSealed(ix.block.isSealed)\n  }\n\n  const res = await unary(opts.node, AccessAPI.GetLatestBlock, req)\n\n  const block = res.getBlock()\n\n  const collectionGuarantees = block.getCollectionGuaranteesList()\n  const blockSeals = block.getBlockSealsList()\n  const signatures = block.getSignaturesList()\n\n  const ret = response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: u8ToHex(block.getId_asU8()),\n    parentId: u8ToHex(block.getParentId_asU8()),\n    height: block.getHeight(),\n    timestamp: block.getTimestamp(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8()),\n      signatures: collectionGuarantee.getSignaturesList(),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8()),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8()),\n      executionReceiptSignatures: blockSeal.getExecutionReceiptSignaturesList(),\n      resultApprovalSignatures: blockSeal.getResultApprovalSignaturesList(),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n","import {GetBlockByIDRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = hex => Buffer.from(hex, \"hex\")\n\nexport async function sendGetBlockById(ix, opts = {}) {\n  ix = await ix\n\n  const req = new GetBlockByIDRequest()\n  req.setId(hexBuffer(ix.block.id))\n\n  const res = await unary(opts.node, AccessAPI.GetBlockByID, req)\n\n  const block = res.getBlock()\n\n  const collectionGuarantees = block.getCollectionGuaranteesList()\n  const blockSeals = block.getBlockSealsList()\n  const signatures = block.getSignaturesList()\n\n  const ret = response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: u8ToHex(block.getId_asU8()),\n    parentId: u8ToHex(block.getParentId_asU8()),\n    height: block.getHeight(),\n    timestamp: block.getTimestamp(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8()),\n      signatures: collectionGuarantee.getSignaturesList(),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8()),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8()),\n      executionReceiptSignatures: blockSeal.getExecutionReceiptSignaturesList(),\n      resultApprovalSignatures: blockSeal.getResultApprovalSignaturesList(),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n","import {GetBlockByHeightRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\n\nexport async function sendGetBlockByHeight(ix, opts = {}) {\n  ix = await ix\n\n  const req = new GetBlockByHeightRequest()\n  req.setHeight(ix.block.height)\n\n  const res = await unary(opts.node, AccessAPI.GetBlockByHeight, req)\n\n  const block = res.getBlock()\n\n  const collectionGuarantees = block.getCollectionGuaranteesList()\n  const blockSeals = block.getBlockSealsList()\n  const signatures = block.getSignaturesList()\n\n  const ret = response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: u8ToHex(block.getId_asU8()),\n    parentId: u8ToHex(block.getParentId_asU8()),\n    height: block.getHeight(),\n    timestamp: block.getTimestamp(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8()),\n      signatures: collectionGuarantee.getSignaturesList(),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8()),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8()),\n      executionReceiptSignatures: blockSeal.getExecutionReceiptSignaturesList(),\n      resultApprovalSignatures: blockSeal.getResultApprovalSignaturesList(),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n","import {\n  isTransaction,\n  isGetTransactionStatus,\n  isScript,\n  isGetAccount,\n  isGetEvents,\n  isGetLatestBlock,\n  isGetBlockById,\n  isGetBlockByHeight,\n  isPing,\n} from \"@onflow/interaction\"\nimport {sendTransaction} from \"./send-transaction\"\nimport {sendGetTransactionStatus} from \"./send-get-transaction-status\"\nimport {sendExecuteScript} from \"./send-execute-script\"\nimport {sendGetAccount} from \"./send-get-account\"\nimport {sendGetEvents} from \"./send-get-events\"\nimport {sendGetLatestBlock} from \"./send-get-latest-block\"\nimport {sendGetBlockById} from \"./send-get-block-by-id\"\nimport {sendGetBlockByHeight} from \"./send-get-block-by-height\"\nimport {sendPing} from \"./send-ping\"\nimport {config} from \"@onflow/config\"\n\nexport const send = async (ix, opts = {}) => {\n  opts.node = opts.node || (await config().get(\"accessNode.api\"))\n  ix = await ix\n\n  switch (true) {\n    case isTransaction(ix):\n      return sendTransaction(ix, opts)\n    case isGetTransactionStatus(ix):\n      return sendGetTransactionStatus(ix, opts)\n    case isScript(ix):\n      return sendExecuteScript(ix, opts)\n    case isGetAccount(ix):\n      return sendGetAccount(ix, opts)\n    case isGetEvents(ix):\n      return sendGetEvents(ix, opts)\n    case isGetLatestBlock(ix):\n      return sendGetLatestBlock(ix, opts)\n    case isGetBlockById(ix):\n      return sendGetBlockById(ix, opts)\n    case isGetBlockByHeight(ix):\n      return sendGetBlockByHeight(ix, opts)\n    case isPing(ix):\n      return sendPing(ix, opts)\n    default:\n      return ix\n  }\n}\n","import {AccessAPI, GetTransactionRequest} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = hex => Buffer.from(hex, \"hex\")\n\nexport async function sendGetTransactionStatus(ix, opts = {}) {\n  ix = await ix\n\n  const req = new GetTransactionRequest()\n  req.setId(hexBuffer(ix.transactionId))\n\n  const res = await unary(opts.node, AccessAPI.GetTransactionResult, req)\n\n  let events = res.getEventsList()\n\n  let ret = response()\n  ret.tag = ix.tag\n  ret.transaction = {\n    status: res.getStatus(),\n    statusCode: res.getStatusCode(),\n    errorMessage: res.getErrorMessage(),\n    events: events.map(event => ({\n      type: event.getType(),\n      transactionId: u8ToHex(event.getTransactionId_asU8()),\n      transactionIndex: event.getTransactionIndex(),\n      eventIndex: event.getEventIndex(),\n      payload: JSON.parse(Buffer.from(event.getPayload_asU8()).toString(\"utf8\")),\n    })),\n  }\n\n  return ret\n}\n","import {ExecuteScriptAtLatestBlockRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst argumentBuffer = arg => Buffer.from(JSON.stringify(arg), \"utf8\")\n\nexport async function sendExecuteScript(ix, opts = {}) {\n  ix = await ix\n\n  const req = new ExecuteScriptAtLatestBlockRequest()\n  const code = Buffer.from(ix.message.cadence, \"utf8\")\n  ix.message.arguments.forEach(arg => req.addArguments(argumentBuffer(ix.arguments[arg].asArgument)))\n  req.setScript(code)\n\n  const res = await unary(opts.node, AccessAPI.ExecuteScriptAtLatestBlock, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n  ret.encodedData = JSON.parse(Buffer.from(res.getValue_asU8()).toString(\"utf8\"))\n\n  return ret\n}\n","import {GetEventsForHeightRangeRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\n\nexport async function sendGetEvents(ix, opts = {}) {\n  ix = await ix\n\n  const req = new GetEventsForHeightRangeRequest()\n  req.setType(ix.events.eventType)\n  req.setStartHeight(Number(ix.events.start))\n  req.setEndHeight(Number(ix.events.end))\n\n  const res = await unary(opts.node, AccessAPI.GetEventsForHeightRange, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n\n  const results = res.getResultsList()\n  ret.events = results.reduce((blocks, result) => {\n    const blockId = result.getBlockId()\n    const blockHeight = result.getBlockHeight()\n    const events = result.getEventsList()\n    events.forEach(event => {\n      blocks.push({\n        blockId,\n        blockHeight,\n        type: event.getType(),\n        transactionId: u8ToHex(event.getTransactionId_asU8()),\n        transactionIndex: event.getTransactionIndex(),\n        eventIndex: event.getEventIndex(),\n        payload: JSON.parse(Buffer.from(event.getPayload_asU8()).toString(\"utf8\")),\n      })\n    })\n    return blocks\n  }, [])\n\n  return ret\n}\n","import {AccessAPI, PingRequest} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nexport async function sendPing(ix, opts = {}) {\n  ix = await ix\n\n  const req = new PingRequest()\n\n  const res = await unary(opts.node, AccessAPI.Ping, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n\n  return ret\n}\n"],"names":["unary","host","method","request","Promise","resolve","reject","grpc","onEnd","status","statusMessage","message","Code","OK","Error","setDefaultTransport","NodeHttpTransport","hexBuffer","hex","Buffer","from","addressBuffer","addr","padStart","pad","u8ToHex","u8","toString","send","async","ix","opts","node","config","get","isTransaction","tx","Transaction","setScript","cadence","setGasLimit","computeLimit","setReferenceBlockId","refBlock","setPayer","sansPrefix","accounts","payer","arguments","forEach","arg","addArguments","JSON","stringify","argumentBuffer","asArgument","authorizations","map","tempId","reduce","prev","current","find","item","addAuthorizers","proposalKey","ProposalKey","setAddress","proposer","setKeyId","keyId","setSequenceNumber","sequenceNum","setProposalKey","acct","Object","values","role","signature","sig","Signature","setSignature","addPayloadSignatures","error","console","addEnvelopeSignatures","req","SendTransactionRequest","setTransaction","t1","Date","now","res","AccessAPI","SendTransaction","t2","ret","response","tag","transactionId","getId_asU8","window","dispatchEvent","CustomEvent","detail","txId","delta","sendTransaction","isGetTransactionStatus","GetTransactionRequest","setId","GetTransactionResult","events","getEventsList","transaction","getStatus","statusCode","getStatusCode","errorMessage","getErrorMessage","event","type","getType","getTransactionId_asU8","transactionIndex","getTransactionIndex","eventIndex","getEventIndex","payload","parse","getPayload_asU8","sendGetTransactionStatus","isScript","ExecuteScriptAtLatestBlockRequest","code","ExecuteScriptAtLatestBlock","encodedData","getValue_asU8","sendExecuteScript","isGetAccount","GetAccountRequest","accountAddr","GetAccount","account","getAccount","contractsMap","contracts","getContractsMap","getEntryList","acc","contract","[object Object]","TextDecoder","decode","UInt8Array","address","withPrefix","getAddress_asU8","balance","getBalance","getCode_asU8","keys","getKeysList","publicKey","index","getIndex","getPublicKey_asU8","signAlgo","getSignAlgo","hashAlgo","getHashAlgo","weight","getWeight","sequenceNumber","getSequenceNumber","revoked","getRevoked","sendGetAccount","isGetEvents","GetEventsForHeightRangeRequest","setType","eventType","setStartHeight","Number","start","setEndHeight","end","GetEventsForHeightRange","results","getResultsList","blocks","result","blockId","getBlockId","blockHeight","getBlockHeight","push","sendGetEvents","isGetLatestBlock","GetLatestBlockRequest","latestBlock","isSealed","setIsSealed","replace","trim","block","GetLatestBlock","getBlock","collectionGuarantees","getCollectionGuaranteesList","blockSeals","getBlockSealsList","signatures","getSignaturesList","id","parentId","getParentId_asU8","height","getHeight","timestamp","getTimestamp","collectionGuarantee","collectionId","getCollectionId_asU8","blockSeal","getBlockId_asU8","executionReceiptId","getExecutionReceiptId_asU8","executionReceiptSignatures","getExecutionReceiptSignaturesList","resultApprovalSignatures","getResultApprovalSignaturesList","sendGetLatestBlock","isGetBlockById","GetBlockByIDRequest","GetBlockByID","sendGetBlockById","isGetBlockByHeight","GetBlockByHeightRequest","setHeight","GetBlockByHeight","sendGetBlockByHeight","isPing","PingRequest","Ping","sendPing"],"mappings":"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"}