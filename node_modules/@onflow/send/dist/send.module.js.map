{"version":3,"file":"send.module.js","sources":["../src/unary.js","../src/send-transaction.js","../src/send-get-account.js","../src/send-get-latest-block.js","../src/send-get-block-by-id.js","../src/send-get-block-by-height.js","../src/send.js","../src/send-get-transaction-status.js","../src/send-execute-script.js","../src/send-get-events.js","../src/send-ping.js"],"sourcesContent":["import {grpc} from \"@improbable-eng/grpc-web\"\nimport {NodeHttpTransport} from \"@improbable-eng/grpc-web-node-http-transport\"\n\ngrpc.setDefaultTransport(NodeHttpTransport())\n\nexport async function unary(host, method, request) {\n  return new Promise((resolve, reject) => {\n    grpc.unary(method, {\n      request: request,\n      host: host,\n      onEnd: ({status, statusMessage, message}) => {\n        if (status === grpc.Code.OK) {\n          resolve(message)\n        } else {\n          reject(new Error(statusMessage))\n        }\n      },\n    })\n  })\n}\n","import {AccessAPI, Transaction, SendTransactionRequest} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {sansPrefix} from \"@onflow/util-address\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\nconst paddedHexBuffer = (hex, pad) =>\n  Buffer.from(hex.padStart(pad * 2, 0), \"hex\")\nconst scriptBuffer = script => Buffer.from(script, \"utf8\")\nconst hexBuffer = hex => Buffer.from(hex, \"hex\")\nconst addressBuffer = addr => paddedHexBuffer(addr, 8)\nconst argumentBuffer = arg => Buffer.from(JSON.stringify(arg), \"utf8\")\n\nexport async function sendTransaction(ix, opts = {}) {\n  ix = await ix\n\n  const tx = new Transaction()\n  tx.setScript(scriptBuffer(ix.message.cadence))\n  tx.setGasLimit(ix.message.computeLimit)\n  tx.setReferenceBlockId(\n    ix.message.refBlock ? hexBuffer(ix.message.refBlock) : null\n  )\n  tx.setPayer(addressBuffer(sansPrefix(ix.accounts[ix.payer].addr)))\n  ix.message.arguments.forEach(arg =>\n    tx.addArguments(argumentBuffer(ix.arguments[arg].asArgument))\n  )\n  ix.authorizations\n    .map(tempId => ix.accounts[tempId].addr)\n    .reduce((prev, current) => {\n      return prev.find(item => item === current) ? prev : [...prev, current]\n    }, [])\n    .forEach(addr => tx.addAuthorizers(addressBuffer(sansPrefix(addr))))\n\n  const proposalKey = new Transaction.ProposalKey()\n  proposalKey.setAddress(\n    addressBuffer(sansPrefix(ix.accounts[ix.proposer].addr))\n  )\n  proposalKey.setKeyId(ix.accounts[ix.proposer].keyId)\n  proposalKey.setSequenceNumber(ix.accounts[ix.proposer].sequenceNum)\n\n  tx.setProposalKey(proposalKey)\n\n  // Apply Non Payer Signatures to Payload Signatures\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (!acct.role.payer && acct.signature != null) {\n        const sig = new Transaction.Signature()\n        sig.setAddress(addressBuffer(sansPrefix(acct.addr)))\n        sig.setKeyId(acct.keyId)\n        sig.setSignature(hexBuffer(acct.signature))\n        tx.addPayloadSignatures(sig)\n      }\n    } catch (error) {\n      console.error(\"Trouble applying payload signature\", {acct, ix})\n      throw error\n    }\n  }\n\n  // Apply Payer Signatures to Envelope Signatures\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (acct.role.payer && acct.signature != null) {\n        const sig = new Transaction.Signature()\n        sig.setAddress(addressBuffer(sansPrefix(acct.addr)))\n        sig.setKeyId(acct.keyId)\n        sig.setSignature(hexBuffer(acct.signature))\n        tx.addEnvelopeSignatures(sig)\n      }\n    } catch (error) {\n      console.error(\"Trouble applying envelope signature\", {acct, ix})\n      throw error\n    }\n  }\n\n  const req = new SendTransactionRequest()\n  req.setTransaction(tx)\n\n  var t1 = Date.now()\n  const res = await unary(opts.node, AccessAPI.SendTransaction, req)\n  var t2 = Date.now()\n\n  let ret = response()\n  ret.tag = ix.tag\n  ret.transactionId = u8ToHex(res.getId_asU8())\n\n  if (typeof window !== \"undefined\") {\n    window.dispatchEvent(\n      new CustomEvent(\"FLOW::TX\", {\n        detail: {txId: ret.transactionId, delta: t2 - t1},\n      })\n    )\n  }\n\n  return ret\n}\n","import {GetAccountRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {sansPrefix, withPrefix} from \"@onflow/util-address\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\nconst paddedHexBuffer = (hex, pad) =>\n  Buffer.from(hex.padStart(pad * 2, 0), \"hex\")\n\nconst addressBuffer = addr => paddedHexBuffer(addr, 8)\n\nexport async function sendGetAccount(ix, opts = {}) {\n  ix = await ix\n\n  const req = new GetAccountRequest()\n  req.setAddress(addressBuffer(sansPrefix(ix.accountAddr)))\n\n  const res = await unary(opts.node, AccessAPI.GetAccount, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n\n  const account = res.getAccount()\n\n  let contractsMap;\n  const contracts = (contractsMap = account.getContractsMap()) ? contractsMap.getEntryList().reduce((acc, contract) => ({\n    ...acc,\n    [contract[0]]: new TextDecoder(\"utf-8\").decode(contract[1] || new UInt8Array())\n  }), {}) : {}\n\n  ret.account = {\n    address: withPrefix(u8ToHex(account.getAddress_asU8())),\n    balance: account.getBalance(),\n    code: new TextDecoder(\"utf-8\").decode(account.getCode_asU8() || new UInt8Array()),\n    contracts,\n    keys: account.getKeysList().map(publicKey => ({\n      index: publicKey.getIndex(),\n      publicKey: u8ToHex(publicKey.getPublicKey_asU8()),\n      signAlgo: publicKey.getSignAlgo(),\n      hashAlgo: publicKey.getHashAlgo(),\n      weight: publicKey.getWeight(),\n      sequenceNumber: publicKey.getSequenceNumber(),\n      revoked: publicKey.getRevoked(),\n    })),\n  }\n\n  return ret\n}\n","import {GetLatestBlockRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\n\nconst latestBlockDeprecationNotice = () => {\n  console.error(\n    `\n          %c@onflow/send Deprecation Notice\n          ========================\n\n          Operating upon data of the latestBlock field of the interaction object is deprecated and will no longer be recognized in future releases of @onflow/send.\n          Find out more here: https://github.com/onflow/flow-js-sdk/blob/master/packages/send/WARNINGS.md#0001-Deprecating-latestBlock-field\n\n          =======================\n        `\n      .replace(/\\n\\s+/g, \"\\n\")\n      .trim(),\n    \"font-weight:bold;font-family:monospace;\"\n  )\n}\n\nexport async function sendGetLatestBlock(ix, opts = {}) {\n  ix = await ix\n\n  const req = new GetLatestBlockRequest()\n\n  if (ix.latestBlock && ix.latestBlock.isSealed) {\n    req.setIsSealed(ix.latestBlock.isSealed)\n    latestBlockDeprecationNotice()\n  }\n\n  if (ix.block && ix.block.isSealed) {\n    req.setIsSealed(ix.block.isSealed)\n  }\n\n  const res = await unary(opts.node, AccessAPI.GetLatestBlock, req)\n\n  const block = res.getBlock()\n\n  const collectionGuarantees = block.getCollectionGuaranteesList()\n  const blockSeals = block.getBlockSealsList()\n  const signatures = block.getSignaturesList()\n\n  const ret = response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: u8ToHex(block.getId_asU8()),\n    parentId: u8ToHex(block.getParentId_asU8()),\n    height: block.getHeight(),\n    timestamp: block.getTimestamp(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8()),\n      signatures: collectionGuarantee.getSignaturesList(),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8()),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8()),\n      executionReceiptSignatures: blockSeal.getExecutionReceiptSignaturesList(),\n      resultApprovalSignatures: blockSeal.getResultApprovalSignaturesList(),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n","import {GetBlockByIDRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = hex => Buffer.from(hex, \"hex\")\n\nexport async function sendGetBlockById(ix, opts = {}) {\n  ix = await ix\n\n  const req = new GetBlockByIDRequest()\n  req.setId(hexBuffer(ix.block.id))\n\n  const res = await unary(opts.node, AccessAPI.GetBlockByID, req)\n\n  const block = res.getBlock()\n\n  const collectionGuarantees = block.getCollectionGuaranteesList()\n  const blockSeals = block.getBlockSealsList()\n  const signatures = block.getSignaturesList()\n\n  const ret = response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: u8ToHex(block.getId_asU8()),\n    parentId: u8ToHex(block.getParentId_asU8()),\n    height: block.getHeight(),\n    timestamp: block.getTimestamp(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8()),\n      signatures: collectionGuarantee.getSignaturesList(),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8()),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8()),\n      executionReceiptSignatures: blockSeal.getExecutionReceiptSignaturesList(),\n      resultApprovalSignatures: blockSeal.getResultApprovalSignaturesList(),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n","import {GetBlockByHeightRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\n\nexport async function sendGetBlockByHeight(ix, opts = {}) {\n  ix = await ix\n\n  const req = new GetBlockByHeightRequest()\n  req.setHeight(ix.block.height)\n\n  const res = await unary(opts.node, AccessAPI.GetBlockByHeight, req)\n\n  const block = res.getBlock()\n\n  const collectionGuarantees = block.getCollectionGuaranteesList()\n  const blockSeals = block.getBlockSealsList()\n  const signatures = block.getSignaturesList()\n\n  const ret = response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: u8ToHex(block.getId_asU8()),\n    parentId: u8ToHex(block.getParentId_asU8()),\n    height: block.getHeight(),\n    timestamp: block.getTimestamp(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8()),\n      signatures: collectionGuarantee.getSignaturesList(),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8()),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8()),\n      executionReceiptSignatures: blockSeal.getExecutionReceiptSignaturesList(),\n      resultApprovalSignatures: blockSeal.getResultApprovalSignaturesList(),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n","import {\n  isTransaction,\n  isGetTransactionStatus,\n  isScript,\n  isGetAccount,\n  isGetEvents,\n  isGetLatestBlock,\n  isGetBlockById,\n  isGetBlockByHeight,\n  isPing,\n} from \"@onflow/interaction\"\nimport {sendTransaction} from \"./send-transaction\"\nimport {sendGetTransactionStatus} from \"./send-get-transaction-status\"\nimport {sendExecuteScript} from \"./send-execute-script\"\nimport {sendGetAccount} from \"./send-get-account\"\nimport {sendGetEvents} from \"./send-get-events\"\nimport {sendGetLatestBlock} from \"./send-get-latest-block\"\nimport {sendGetBlockById} from \"./send-get-block-by-id\"\nimport {sendGetBlockByHeight} from \"./send-get-block-by-height\"\nimport {sendPing} from \"./send-ping\"\nimport {config} from \"@onflow/config\"\n\nexport const send = async (ix, opts = {}) => {\n  opts.node = opts.node || (await config().get(\"accessNode.api\"))\n  ix = await ix\n\n  switch (true) {\n    case isTransaction(ix):\n      return sendTransaction(ix, opts)\n    case isGetTransactionStatus(ix):\n      return sendGetTransactionStatus(ix, opts)\n    case isScript(ix):\n      return sendExecuteScript(ix, opts)\n    case isGetAccount(ix):\n      return sendGetAccount(ix, opts)\n    case isGetEvents(ix):\n      return sendGetEvents(ix, opts)\n    case isGetLatestBlock(ix):\n      return sendGetLatestBlock(ix, opts)\n    case isGetBlockById(ix):\n      return sendGetBlockById(ix, opts)\n    case isGetBlockByHeight(ix):\n      return sendGetBlockByHeight(ix, opts)\n    case isPing(ix):\n      return sendPing(ix, opts)\n    default:\n      return ix\n  }\n}\n","import {AccessAPI, GetTransactionRequest} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = hex => Buffer.from(hex, \"hex\")\n\nexport async function sendGetTransactionStatus(ix, opts = {}) {\n  ix = await ix\n\n  const req = new GetTransactionRequest()\n  req.setId(hexBuffer(ix.transactionId))\n\n  const res = await unary(opts.node, AccessAPI.GetTransactionResult, req)\n\n  let events = res.getEventsList()\n\n  let ret = response()\n  ret.tag = ix.tag\n  ret.transaction = {\n    status: res.getStatus(),\n    statusCode: res.getStatusCode(),\n    errorMessage: res.getErrorMessage(),\n    events: events.map(event => ({\n      type: event.getType(),\n      transactionId: u8ToHex(event.getTransactionId_asU8()),\n      transactionIndex: event.getTransactionIndex(),\n      eventIndex: event.getEventIndex(),\n      payload: JSON.parse(Buffer.from(event.getPayload_asU8()).toString(\"utf8\")),\n    })),\n  }\n\n  return ret\n}\n","import {ExecuteScriptAtLatestBlockRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst argumentBuffer = arg => Buffer.from(JSON.stringify(arg), \"utf8\")\n\nexport async function sendExecuteScript(ix, opts = {}) {\n  ix = await ix\n\n  const req = new ExecuteScriptAtLatestBlockRequest()\n  const code = Buffer.from(ix.message.cadence, \"utf8\")\n  ix.message.arguments.forEach(arg => req.addArguments(argumentBuffer(ix.arguments[arg].asArgument)))\n  req.setScript(code)\n\n  const res = await unary(opts.node, AccessAPI.ExecuteScriptAtLatestBlock, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n  ret.encodedData = JSON.parse(Buffer.from(res.getValue_asU8()).toString(\"utf8\"))\n\n  return ret\n}\n","import {GetEventsForHeightRangeRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = u8 => Buffer.from(u8).toString(\"hex\")\n\nexport async function sendGetEvents(ix, opts = {}) {\n  ix = await ix\n\n  const req = new GetEventsForHeightRangeRequest()\n  req.setType(ix.events.eventType)\n  req.setStartHeight(Number(ix.events.start))\n  req.setEndHeight(Number(ix.events.end))\n\n  const res = await unary(opts.node, AccessAPI.GetEventsForHeightRange, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n\n  const results = res.getResultsList()\n  ret.events = results.reduce((blocks, result) => {\n    const blockId = result.getBlockId()\n    const blockHeight = result.getBlockHeight()\n    const events = result.getEventsList()\n    events.forEach(event => {\n      blocks.push({\n        blockId,\n        blockHeight,\n        type: event.getType(),\n        transactionId: u8ToHex(event.getTransactionId_asU8()),\n        transactionIndex: event.getTransactionIndex(),\n        eventIndex: event.getEventIndex(),\n        payload: JSON.parse(Buffer.from(event.getPayload_asU8()).toString(\"utf8\")),\n      })\n    })\n    return blocks\n  }, [])\n\n  return ret\n}\n","import {AccessAPI, PingRequest} from \"@onflow/protobuf\"\nimport {response} from \"@onflow/response\"\nimport {unary} from \"./unary\"\n\nexport async function sendPing(ix, opts = {}) {\n  ix = await ix\n\n  const req = new PingRequest()\n\n  const res = await unary(opts.node, AccessAPI.Ping, req)\n\n  let ret = response()\n  ret.tag = ix.tag\n\n  return ret\n}\n"],"names":["unary","host","method","request","Promise","resolve","reject","grpc","onEnd","statusMessage","status","Code","OK","message","Error","setDefaultTransport","NodeHttpTransport","hexBuffer","hex","Buffer","from","addressBuffer","addr","padStart","pad","u8ToHex","u8","toString","send","ix","opts","node","isTransaction","tx","Transaction","setScript","cadence","setGasLimit","computeLimit","setReferenceBlockId","refBlock","setPayer","sansPrefix","accounts","payer","arguments","forEach","arg","addArguments","JSON","stringify","argumentBuffer","asArgument","authorizations","map","tempId","reduce","prev","current","find","item","addAuthorizers","proposalKey","ProposalKey","setAddress","proposer","setKeyId","keyId","setSequenceNumber","sequenceNum","setProposalKey","Object","values","acct","role","signature","sig","Signature","setSignature","addPayloadSignatures","error","console","addEnvelopeSignatures","req","SendTransactionRequest","setTransaction","t1","Date","now","AccessAPI","SendTransaction","res","t2","ret","response","tag","transactionId","getId_asU8","window","dispatchEvent","CustomEvent","detail","txId","delta","sendTransaction","isGetTransactionStatus","GetTransactionRequest","setId","GetTransactionResult","events","getEventsList","transaction","getStatus","statusCode","getStatusCode","errorMessage","getErrorMessage","event","type","getType","getTransactionId_asU8","transactionIndex","getTransactionIndex","eventIndex","getEventIndex","payload","parse","getPayload_asU8","sendGetTransactionStatus","isScript","ExecuteScriptAtLatestBlockRequest","code","ExecuteScriptAtLatestBlock","encodedData","getValue_asU8","sendExecuteScript","isGetAccount","GetAccountRequest","accountAddr","GetAccount","contractsMap","account","getAccount","contracts","getContractsMap","getEntryList","acc","contract","TextDecoder","decode","UInt8Array","address","withPrefix","getAddress_asU8","balance","getBalance","getCode_asU8","keys","getKeysList","publicKey","index","getIndex","getPublicKey_asU8","signAlgo","getSignAlgo","hashAlgo","getHashAlgo","weight","getWeight","sequenceNumber","getSequenceNumber","revoked","getRevoked","sendGetAccount","isGetEvents","GetEventsForHeightRangeRequest","setType","eventType","setStartHeight","Number","start","setEndHeight","end","GetEventsForHeightRange","results","getResultsList","blocks","result","blockId","getBlockId","blockHeight","getBlockHeight","push","sendGetEvents","isGetLatestBlock","GetLatestBlockRequest","latestBlock","isSealed","setIsSealed","replace","trim","block","GetLatestBlock","getBlock","collectionGuarantees","getCollectionGuaranteesList","blockSeals","getBlockSealsList","signatures","getSignaturesList","id","parentId","getParentId_asU8","height","getHeight","timestamp","getTimestamp","collectionGuarantee","collectionId","getCollectionId_asU8","blockSeal","getBlockId_asU8","executionReceiptId","getExecutionReceiptId_asU8","executionReceiptSignatures","getExecutionReceiptSignaturesList","resultApprovalSignatures","getResultApprovalSignaturesList","sendGetLatestBlock","isGetBlockById","GetBlockByIDRequest","GetBlockByID","sendGetBlockById","isGetBlockByHeight","GetBlockByHeightRequest","setHeight","GetBlockByHeight","sendGetBlockByHeight","isPing","PingRequest","Ping","sendPing","config","get"],"mappings":"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"}