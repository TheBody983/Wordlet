import{isTransaction as e,Ok as r,pipe as n}from"@onflow/interaction";function o(){return(o=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}const t=e=>"function"==typeof e,a=e=>"number"==typeof e,i=e=>"string"==typeof e,u=(e,r,...n)=>{if(!e){const e=new Error("INVARIANT "+r);throw e.stack=e.stack.split("\n").filter(e=>!/at invariant/.test(e)).join("\n"),console.error("\n\n---\n\n",e,"\n\n",...n,"\n\n---\n\n"),e}},s=e=>!(e.role.proposer&&!(i(e.addr)&&a(e.keyId)&&a(e.sequenceNum)&&t(e.signingFunction))||e.role.payer&&!(i(e.addr)&&a(e.keyId)&&t(e.signingFunction))||e.role.authorizer&&!(i(e.addr)&&a(e.keyId)&&t(e.signingFunction))),c=(e=[])=>e.filter(Boolean)[0]||null,l=(e=[])=>"number"==typeof e.filter(a)[0]?e.filter(a)[0]:null,p=(e=[])=>e.find(e=>e.role.proposer)||{},d=async n=>{if(!e(n))return r(n);for(let[e,r]of Object.entries(n.accounts))t(r.resolve)&&(n.accounts[e]=await r.resolve(r)),u(s(n.accounts[e]),"Account unable to fulfill role",n.accounts[e]);return r(n)},f=async n=>{if(!e(n))return r(n);for(let e of Object.values(n.accounts)){const r=`${e.addr}|${e.keyId}`;n.accounts[r]=null!=n.accounts[r]?(t=n.accounts[r],a=o({tempId:r},e),{kind:c([t.kind,a.kind]),tempId:c([t.tempId,a.tempId]),addr:c([t.addr,a.addr]),keyId:l([t.keyId,a.keyId]),sequenceNum:"number"==typeof p([t,a]).sequenceNum?p([t,a]).sequenceNum:t.sequenceNum,signature:c([t.signature,a.signature]),signingFunction:c([t.signingFunction,a.signingFunction]),resolve:c([t.resolve,a.resolve]),role:{proposer:t.role.proposer||a.role.proposer,authorizer:t.role.authorizer||a.role.authorizer,payer:t.role.payer||a.role.payer,param:t.role.param||a.role.param}}):o({tempId:r},e),n.proposer===e.tempId&&(n.proposer=r),n.payer===e.tempId&&(n.payer=r),n.authorizations=n.authorizations.map(n=>n===e.tempId?r:n),delete n.accounts[e.tempId]}var t,a;for(let e of Object.values(n.accounts))u(s(e),"Account unable to fulfill roles",e);return r(n)},m=n([d,f]);export{f as dedupeResolvedAccounts,d as enforceResolvedAccounts,m as resolveAccounts};
//# sourceMappingURL=sdk-resolve-accounts.modern.js.map
