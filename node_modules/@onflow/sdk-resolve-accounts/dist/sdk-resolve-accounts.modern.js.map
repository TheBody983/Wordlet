{"version":3,"file":"sdk-resolve-accounts.modern.js","sources":["../src/index.js"],"sourcesContent":["import {pipe, isTransaction, Ok} from \"@onflow/interaction\"\n\nconst isFn = d => typeof d === \"function\"\nconst isNumber = d => typeof d === \"number\"\nconst isString = d => typeof d === \"string\"\n\nconst invariant = (fact, msg, ...rest) => {\n  if (!fact) {\n    const error = new Error(`INVARIANT ${msg}`)\n    error.stack = error.stack\n      .split(\"\\n\")\n      .filter(d => !/at invariant/.test(d))\n      .join(\"\\n\")\n    console.error(\"\\n\\n---\\n\\n\", error, \"\\n\\n\", ...rest, \"\\n\\n---\\n\\n\")\n    throw error\n  }\n}\n\nconst accountCanFulfillRoles = account => {\n  if (account.role.proposer) {\n    if (\n      !isString(account.addr) ||\n      !isNumber(account.keyId) ||\n      !isNumber(account.sequenceNum) ||\n      !isFn(account.signingFunction)\n    )\n      return false\n  }\n  if (account.role.payer) {\n    if (\n      !isString(account.addr) ||\n      !isNumber(account.keyId) ||\n      !isFn(account.signingFunction)\n    )\n      return false\n  }\n  if (account.role.authorizer) {\n    if (\n      !isString(account.addr) ||\n      !isNumber(account.keyId) ||\n      !isFn(account.signingFunction)\n    )\n      return false\n  }\n  return true\n}\n\nconst firstNonNull = (values = []) => values.filter(Boolean)[0] || null\nconst firstNonNullKeyId = (values = []) =>\n  typeof values.filter(isNumber)[0] === \"number\"\n    ? values.filter(isNumber)[0]\n    : null\nconst findProposer = (accounts = []) =>\n  accounts.find(d => d.role.proposer) || {}\n\nconst deepMergeAccount = (into, from) => ({\n  kind: firstNonNull([into.kind, from.kind]),\n  tempId: firstNonNull([into.tempId, from.tempId]),\n  addr: firstNonNull([into.addr, from.addr]),\n  keyId: firstNonNullKeyId([into.keyId, from.keyId]),\n  sequenceNum:\n    typeof findProposer([into, from]).sequenceNum === \"number\"\n      ? findProposer([into, from]).sequenceNum\n      : into.sequenceNum,\n  signature: firstNonNull([into.signature, from.signature]),\n  signingFunction: firstNonNull([into.signingFunction, from.signingFunction]),\n  resolve: firstNonNull([into.resolve, from.resolve]),\n  role: {\n    proposer: into.role.proposer || from.role.proposer,\n    authorizer: into.role.authorizer || from.role.authorizer,\n    payer: into.role.payer || from.role.payer,\n    param: into.role.param || from.role.param,\n  },\n})\n\nexport const enforceResolvedAccounts = async ix => {\n  if (!isTransaction(ix)) return Ok(ix)\n  for (let [tempId, account] of Object.entries(ix.accounts)) {\n    if (isFn(account.resolve))\n      ix.accounts[tempId] = await account.resolve(account)\n    invariant(\n      accountCanFulfillRoles(ix.accounts[tempId]),\n      \"Account unable to fulfill role\",\n      ix.accounts[tempId]\n    )\n  }\n  return Ok(ix)\n}\n\nexport const dedupeResolvedAccounts = async ix => {\n  if (!isTransaction(ix)) return Ok(ix)\n  for (let account of Object.values(ix.accounts)) {\n    const cid = `${account.addr}|${account.keyId}`\n    if (ix.accounts[cid] != null) {\n      ix.accounts[cid] = deepMergeAccount(ix.accounts[cid], {\n        tempId: cid,\n        ...account,\n      })\n    } else {\n      ix.accounts[cid] = {tempId: cid, ...account}\n    }\n    if (ix.proposer === account.tempId) ix.proposer = cid\n    if (ix.payer === account.tempId) ix.payer = cid\n    ix.authorizations = ix.authorizations.map(d =>\n      d === account.tempId ? cid : d\n    )\n    delete ix.accounts[account.tempId]\n  }\n  for (let account of Object.values(ix.accounts)) {\n    invariant(\n      accountCanFulfillRoles(account),\n      \"Account unable to fulfill roles\",\n      account\n    )\n  }\n  return Ok(ix)\n}\n\nexport const resolveAccounts = pipe([\n  enforceResolvedAccounts,\n  dedupeResolvedAccounts,\n])\n"],"names":["isFn","d","isNumber","isString","invariant","fact","msg","rest","error","Error","stack","split","filter","test","join","console","accountCanFulfillRoles","account","role","proposer","addr","keyId","sequenceNum","signingFunction","payer","authorizer","firstNonNull","values","Boolean","firstNonNullKeyId","findProposer","accounts","find","enforceResolvedAccounts","async","isTransaction","ix","Ok","tempId","Object","entries","resolve","dedupeResolvedAccounts","cid","into","from","kind","signature","param","authorizations","map","resolveAccounts","pipe"],"mappings":"qRAEA,MAAMA,EAAOC,GAAkB,mBAANA,EACnBC,EAAWD,GAAkB,iBAANA,EACvBE,EAAWF,GAAkB,iBAANA,EAEvBG,EAAY,CAACC,EAAMC,KAAQC,KAC/B,IAAKF,EAAM,CACT,MAAMG,EAAQ,IAAIC,MAAO,aAAYH,GAMrC,MALAE,EAAME,MAAQF,EAAME,MACjBC,MAAM,MACNC,OAAOX,IAAM,eAAeY,KAAKZ,IACjCa,KAAK,MACRC,QAAQP,MAAM,cAAeA,EAAO,UAAWD,EAAM,eAC/CC,IAIJQ,EAAyBC,KACzBA,EAAQC,KAAKC,YAEZhB,EAASc,EAAQG,OACjBlB,EAASe,EAAQI,QACjBnB,EAASe,EAAQK,cACjBtB,EAAKiB,EAAQM,mBAIdN,EAAQC,KAAKM,SAEZrB,EAASc,EAAQG,OACjBlB,EAASe,EAAQI,QACjBrB,EAAKiB,EAAQM,mBAIdN,EAAQC,KAAKO,cAEZtB,EAASc,EAAQG,OACjBlB,EAASe,EAAQI,QACjBrB,EAAKiB,EAAQM,mBAOdG,EAAe,CAACC,EAAS,KAAOA,EAAOf,OAAOgB,SAAS,IAAM,KAC7DC,EAAoB,CAACF,EAAS,KACI,iBAA/BA,EAAOf,OAAOV,GAAU,GAC3ByB,EAAOf,OAAOV,GAAU,GACxB,KACA4B,EAAe,CAACC,EAAW,KAC/BA,EAASC,KAAK/B,GAAKA,EAAEiB,KAAKC,WAAa,GAsB5Bc,EAA0BC,MAAAA,IACrC,IAAKC,EAAcC,GAAK,OAAOC,EAAGD,GAClC,IAAK,IAAKE,EAAQrB,KAAYsB,OAAOC,QAAQJ,EAAGL,UAC1C/B,EAAKiB,EAAQwB,WACfL,EAAGL,SAASO,SAAgBrB,EAAQwB,QAAQxB,IAC9Cb,EACEY,EAAuBoB,EAAGL,SAASO,IACnC,iCACAF,EAAGL,SAASO,IAGhB,OAAOD,EAAGD,IAGCM,EAAyBR,MAAAA,IACpC,IAAKC,EAAcC,GAAK,OAAOC,EAAGD,GAClC,IAAK,IAAInB,KAAWsB,OAAOZ,OAAOS,EAAGL,UAAW,CAC9C,MAAMY,EAAO,GAAE1B,EAAQG,QAAQH,EAAQI,QAErCe,EAAGL,SAASY,GADU,MAApBP,EAAGL,SAASY,IAtCMC,EAuCgBR,EAAGL,SAASY,GAvCtBE,KAwCxBP,OAAQK,GACL1B,IAxCT6B,KAAMpB,EAAa,CAACkB,EAAKE,KAAMD,EAAKC,OACpCR,OAAQZ,EAAa,CAACkB,EAAKN,OAAQO,EAAKP,SACxClB,KAAMM,EAAa,CAACkB,EAAKxB,KAAMyB,EAAKzB,OACpCC,MAAOQ,EAAkB,CAACe,EAAKvB,MAAOwB,EAAKxB,QAC3CC,YACoD,iBAA3CQ,EAAa,CAACc,EAAMC,IAAOvB,YAC9BQ,EAAa,CAACc,EAAMC,IAAOvB,YAC3BsB,EAAKtB,YACXyB,UAAWrB,EAAa,CAACkB,EAAKG,UAAWF,EAAKE,YAC9CxB,gBAAiBG,EAAa,CAACkB,EAAKrB,gBAAiBsB,EAAKtB,kBAC1DkB,QAASf,EAAa,CAACkB,EAAKH,QAASI,EAAKJ,UAC1CvB,KAAM,CACJC,SAAUyB,EAAK1B,KAAKC,UAAY0B,EAAK3B,KAAKC,SAC1CM,WAAYmB,EAAK1B,KAAKO,YAAcoB,EAAK3B,KAAKO,WAC9CD,MAAOoB,EAAK1B,KAAKM,OAASqB,EAAK3B,KAAKM,MACpCwB,MAAOJ,EAAK1B,KAAK8B,OAASH,EAAK3B,KAAK8B,YA4BdV,OAAQK,GAAQ1B,GAElCmB,EAAGjB,WAAaF,EAAQqB,SAAQF,EAAGjB,SAAWwB,GAC9CP,EAAGZ,QAAUP,EAAQqB,SAAQF,EAAGZ,MAAQmB,GAC5CP,EAAGa,eAAiBb,EAAGa,eAAeC,IAAIjD,GACxCA,IAAMgB,EAAQqB,OAASK,EAAM1C,UAExBmC,EAAGL,SAASd,EAAQqB,QAnDN,IAACM,EAAMC,EAqD9B,IAAK,IAAI5B,KAAWsB,OAAOZ,OAAOS,EAAGL,UACnC3B,EACEY,EAAuBC,GACvB,kCACAA,GAGJ,OAAOoB,EAAGD,IAGCe,EAAkBC,EAAK,CAClCnB,EACAS"}